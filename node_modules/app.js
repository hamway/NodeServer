var fs = require('fs');
var util = require('util');
var api = require('api');
var path = require('path');
var url = require('url');
var os = require('os');
var stats = require('stats');

/**
 * @TODO: Create module config
 * @type {*}
 */
exports.home = process.cwd();
exports.public = path.join(process.cwd(), '/public');
exports.configdir = path.join(this.home, '/config');
exports.configfile = path.join(this.configdir, '/config.json');
exports.config = null;

exports.prepare = function () {
    util.debug('Read config...');
    if (!fs.existsSync(this.configdir)) {
        process.on('exit', function () {
            util.error('Config directory not found');
        });
    }
    if (!fs.existsSync(this.configfile)) {
        process.on('exit', function () {
            util.error('Config file not found');
        });
    }
    var config = JSON.parse(fs.readFileSync(this.configfile));

    if (config.debug) {
        //var debug = require('debug');
    }

    var args = process.argv;

    if (args[2]) config.http.host = args[2];
    if (args[3]) config.http.port = args[3];

    this.config = config;
};

exports.setServer = function () {
    api.res.setHeader('Server', this.config.serverName);
}

exports.favicon = function () {
    var favicon = path.join(this.public, '/favicon.ico');
    this.getPublicFile(favicon);
}

exports.call = function () {
    var params = url.parse(api.url);
    switch (params.pathname) {
        case "/":
            var index = path.join(this.public, this.config.index);
            this.getPublicFile(index);
            break;
        case "/status":
            this.getStatus(params.query);
            break;
        case "/status/date":
            this.getStatusDate(params.query, function (responce) {
                var app = require('app');
                var result = objectToString(responce, 'json');
                app.sendClient(result);
            });
            break;
        default:
            exports.route(params);
    }
}
exports.route = function (params) {
    if (path.extname(params.pathname) != '') {
        var file = path.join(this.public, params.pathname);
        this.getPublicFile(file);
    } else {
        api.res.writeHead(200, {'Content-Type': 'text/plain'});
        api.res.write('Api method not registred');
        util.debug('Api method not registred');
    }
}
exports.getStatus = function (type) {
    var output = {
        'Hostname': os.hostname(),
        'Type': os.type(),
        'Platform': os.platform(),
        'Arch': os.arch(),
        'Endianness': os.endianness(),
        'Release': os.release(),
        'Uptime': os.uptime(),
        'Load Average': os.loadavg(),
        'Totoal Memory': os.totalmem(),
        'Free Memory': os.freemem(),
        'Cpus': os.cpus(),
        'Network': os.networkInterfaces()
    }
    var res = {}
    if (type == "json") {
        res = JSON.stringify(output);
    } else if (type == "raw") {
        res = objectToString(output);
    } else {
        api.res.writeHead(302, { 'Location': '/stats.html'});
    }
    if (type != undefined) {
        this.sendClient(res);
    }
}

exports.getStatusDate = function (param, callback) {
    var param = param.split('=')[1];
    stats.getValue('date:' + param, callback);
}

exports.sendClient = function (text) {
    if (text == undefined) {
        api.res.writeHead(503, { "Content-Type": "text/plain" });
        api.res.write("503 Service Unavalible\n");
    } else {
        api.res.writeHead(200, {'Content-Type': "text/plain"});
        api.res.write(text, 'utf-8');
    }
    api.res.end();
}

exports.getPublicFile = function (filepath, content) {
    var type = this.mime(filepath);

    if (filepath == undefined) this.destroy('Wrong file request');
    var mode = (
        type == "image/png" ||
            type == "image/x-icon" ||
            type == "image/jpeg" ||
            type == "image/gif") ? 'binary' : 'utf-8';

    if (fs.existsSync(filepath)) {
        api.res.writeHead(200, {'Content-Type': type});
        api.res.write(fs.readFileSync(filepath, mode), mode);
    } else {
        api.res.writeHead(404, { "Content-Type": "text/plain" });
        api.res.write("404 Not Found\n");
    }
    api.res.end();
}
/**
 * @TODO: Need create module
 * @param file
 * @returns {*}
 */
exports.mime = function (file) {
    var ext = path.extname(file);
    var list = JSON.parse(fs.readFileSync(path.join(this.configdir, '/mime.json'), 'utf-8'));
    var type = list[ext];

    if (list[ext] == undefined) type = 'text/plain';

    return type;
}

exports.destroy = function (message) {
    process.on('exit', function () {
        util.error(message);
    });
}

function objectToString(obj, type, level) {
    var res = '';
    if (level == undefined) {
        level = 0;
    } else {
        level++;
    }

    if (type == undefined) type = 'text';

    if(type == 'json') {
        res += '{';
    }
    for (var key in obj) {
        var value = obj[key]

        if (level > 0) {
            var i = 0;
            for (i = 0; i < level; i++) {
                res += '  ';
            }
        }

        if ((typeof value) != 'object') {
            if(type == 'json') {
                res += '"'+ key + '":"' + value + '"';
            } else
            res += key + ': ' + value + os.EOL;
        } else {
            if(type == 'json') {
                res += '"' + key + '":';
            } else
            res += key + ':' + os.EOL;
            res += objectToString(value, type, level);
        }
    }

    if(type == 'json') {
        res += '}';
    }

    return res;
}